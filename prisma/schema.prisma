generator client {
  provider      = "prisma-client-js"
  output        = "/home/rizzo/bounty-website/node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String            @id @default(cuid())
  hotkey            String?           @unique
  username          String?           @unique
  email             String?           @unique
  walletAddress     String?
  password          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isActive          Boolean           @default(true)
  isAdmin           Boolean           @default(false)
  acceptedTos       Boolean           @default(false)
  tosAcceptedAt     DateTime?
  walletNetwork     WalletNetwork?
  accounts          Account[]
  sessions          Session[]
  bounties          Bounty[]
  bugReports        BugReport[]
  submissions       Submission[]
  suggestedBounties SuggestedBounty[]
  votes             Vote[]
  walletChangeLogs  WalletChangeLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bounty {
  id                      String                  @id @default(cuid())
  title                   String
  problem                 String
  info                    String
  requirements            String
  rewardDistribution      RewardDistribution      @default(ALL_AT_ONCE)
  winningSpots            Int                     @default(1)
  status                  BountyStatus            @default(DRAFT)
  isPublished             Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  deadline                DateTime?
  creatorId               String
  acceptedSubmissionTypes SubmissionContentType[] @default([FILE])
  submissionDisclaimer    String?
  percentOfTreasury       Int                     @default(0)
  creator                 User                    @relation(fields: [creatorId], references: [id])
  tasks                   BountyTask[]
  screenerSupports        ScreenerBountySupport[]
  submissions             Submission[]
  suggestedBounty         SuggestedBounty?
  winningSpotConfigs      WinningSpot[]
  categories              BountyCategory[]        @relation("BountyToBountyCategory")

  @@map("bounties")
}

model BountyCategory {
  id                String                  @id @default(cuid())
  name              String                  @unique
  color             String?
  createdAt         DateTime                @default(now())
  screenerSupports  ScreenerBountySupport[]
  suggestedBounties SuggestedBounty[]       @relation("BountyCategoryToSuggestedBounty")
  bounties          Bounty[]                @relation("BountyToBountyCategory")

  @@map("bounty_categories")
}

model Submission {
  id                String                @id @default(cuid())
  title             String
  description       String
  status            SubmissionStatus      @default(PENDING)
  score             Decimal?              @db.Decimal(5, 2)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  validatedAt       DateTime?
  bountyId          String
  submitterId       String
  suggestedBountyId String?
  contentType       SubmissionContentType @default(FILE)
  textContent       String?
  urls              String[]              @default([])
  tosAccepted       Boolean               @default(false)
  tosAcceptedAt     DateTime?
  scoredBy          String[]              @default([])
  scoringJobs       ScoringJob[]
  files             SubmissionFile[]
  bounty            Bounty                @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  submitter         User                  @relation(fields: [submitterId], references: [id])
  suggestedBounty   SuggestedBounty?      @relation(fields: [suggestedBountyId], references: [id], onDelete: Cascade)
  validationLogs    ValidationLog[]
  votes             Vote[]

  @@map("submissions")
}

model SubmissionFile {
  id           String     @id @default(cuid())
  originalName String
  filename     String
  filepath     String
  filesize     BigInt
  mimeType     String
  fileType     FileType   @default(OTHER)
  uploadedAt   DateTime   @default(now())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("submission_files")
}

model Vote {
  id           String     @id @default(cuid())
  type         VoteType
  createdAt    DateTime   @default(now())
  userId       String
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, submissionId])
  @@map("votes")
}

model ValidationLog {
  id           String           @id @default(cuid())
  type         ValidationType
  result       ValidationResult @default(PENDING)
  score        Decimal?         @db.Decimal(5, 2)
  notes        String?
  validatorId  String?
  createdAt    DateTime         @default(now())
  submissionId String
  submission   Submission       @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("validation_logs")
}

model SuggestedBounty {
  id                      String                  @id @default(cuid())
  title                   String
  problem                 String
  info                    String
  requirements            String
  rewardDistribution      RewardDistribution      @default(ALL_AT_ONCE)
  winningSpots            Int                     @default(1)
  status                  SuggestedBountyStatus   @default(PENDING)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  deadline                DateTime?
  creatorId               String
  acceptedSubmissionTypes SubmissionContentType[] @default([FILE])
  bountyId                String?                 @unique
  submissionDisclaimer    String?
  screenerSupports        ScreenerBountySupport[]
  submissions             Submission[]
  bounty                  Bounty?                 @relation(fields: [bountyId], references: [id])
  creator                 User                    @relation(fields: [creatorId], references: [id])
  winningSpotConfigs      WinningSpot[]
  categories              BountyCategory[]        @relation("BountyCategoryToSuggestedBounty")

  @@map("suggested_bounties")
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  description String
  targetDate  DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  isPublic    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("milestones")
}

model Screener {
  id                  String                  @id @default(cuid())
  name                String                  @unique
  hotkey              String                  @unique
  apiUrl              String
  isActive            Boolean                 @default(true)
  priority            Int                     @default(0)
  maxConcurrent       Int                     @default(5)
  currentJobs         Int                     @default(0)
  lastHeartbeat       DateTime?
  heartbeatFailures   Int                     @default(0)
  reportedRunningJobs String[]                @default([])
  lastJobReport       DateTime?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  scoringJobs         ScoringJob[]
  supportedBounties   ScreenerBountySupport[]

  @@map("screeners")
}

model ScreenerBountySupport {
  id                String                  @id @default(cuid())
  screenerId        String
  bountyId          String?
  suggestedBountyId String?
  categoryId        String?
  submissionTypes   SubmissionContentType[]
  bounty            Bounty?                 @relation(fields: [bountyId], references: [id])
  category          BountyCategory?         @relation(fields: [categoryId], references: [id])
  screener          Screener                @relation(fields: [screenerId], references: [id], onDelete: Cascade)
  suggestedBounty   SuggestedBounty?        @relation(fields: [suggestedBountyId], references: [id])

  @@unique([screenerId, bountyId])
  @@unique([screenerId, suggestedBountyId])
  @@unique([screenerId, categoryId])
  @@map("screener_bounty_support")
}

model ScoringJob {
  id           String           @id @default(cuid())
  submissionId String
  screenerId   String
  status       ScoringJobStatus @default(PENDING)
  score        Decimal?         @db.Decimal(5, 2)
  startedAt    DateTime?
  completedAt  DateTime?
  errorMessage String?
  retryCount   Int              @default(0)
  maxRetries   Int              @default(3)
  nextRetryAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  currentScore Decimal?         @db.Decimal(5, 2)
  scoringTasks ScoringTask[]
  screener     Screener         @relation(fields: [screenerId], references: [id])
  submission   Submission       @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, screenerId])
  @@map("scoring_jobs")
}

model WinningSpot {
  id                String           @id @default(cuid())
  position          Int
  reward            Decimal          @db.Decimal(18, 8)
  rewardCap         Decimal          @db.Decimal(18, 8)
  coldkey           String
  createdAt         DateTime         @default(now())
  bountyId          String?
  suggestedBountyId String?
  percentOfTotal    Int?
  bounty            Bounty?          @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  suggestedBounty   SuggestedBounty? @relation(fields: [suggestedBountyId], references: [id], onDelete: Cascade)

  @@unique([bountyId, position])
  @@unique([suggestedBountyId, position])
  @@map("winning_spots")
}

model BugReport {
  id          String            @id @default(cuid())
  title       String
  description String
  category    BugReportCategory @default(OTHER)
  priority    BugReportPriority @default(MEDIUM)
  status      BugReportStatus   @default(OPEN)
  reportedAt  DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  reporterId  String?
  reporter    User?             @relation(fields: [reporterId], references: [id])

  @@map("bug_reports")
}

model WalletChangeLog {
  id         String           @id @default(cuid())
  userId     String
  oldAddress String?
  newAddress String?
  changeType WalletChangeType
  createdAt  DateTime         @default(now())
  ipAddress  String?
  userAgent  String?
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet_change_logs")
}

model BountyTask {
  id          String       @id @default(cuid())
  name        String
  description String
  createdAt   DateTime     @default(now())
  bountyId    String
  bounty      Bounty       @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  scoringTasks ScoringTask[]

  @@map("bounty_tasks")
}

model ScoringTask {
  id              String           @id @default(cuid())
  taskId          String?
  taskName        String
  taskDescription String?
  score           Decimal?         @db.Decimal(5, 2)
  status          ScoringTaskStatus @default(NOT_STARTED)
  scoringJobId    String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  scoringJob      ScoringJob       @relation(fields: [scoringJobId], references: [id], onDelete: Cascade)
  task            BountyTask?      @relation(fields: [taskId], references: [id])

  @@map("scoring_tasks")
}

enum BountyStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum SuggestedBountyStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RewardDistribution {
  ALL_AT_ONCE
  OVER_TIME
}

enum SubmissionContentType {
  URL
  FILE
  TEXT
  MIXED
}

enum SubmissionStatus {
  PENDING
  SCORING
  APPROVED
  REJECTED
  WINNER
}

enum FileType {
  DOCUMENT
  IMAGE
  VIDEO
  CODE
  ARCHIVE
  OTHER
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum ValidationType {
  AUTOMATED
  MANUAL
  COMMUNITY
}

enum ValidationResult {
  PASS
  FAIL
  PENDING
}

enum ScoringJobStatus {
  PENDING
  ASSIGNED
  SCORING
  COMPLETED
  FAILED
  CANCELLED
}

enum BugReportCategory {
  UI_UX
  FUNCTIONALITY
  PERFORMANCE
  SECURITY
  OTHER
}

enum BugReportPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BugReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum WalletChangeType {
  ADDED
  UPDATED
  REMOVED
}

enum WalletNetwork {
  BTC
  ETH
  TAO
}

enum ScoringTaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}
